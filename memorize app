//
//  ContentView.swift
//  Memorize
//
//  Created by Sheraz Ahmad on 31/12/2024.
//

import SwiftUI

struct ContentView: View {
    let emojis = ["👻","💀","☠️","👽","👻","💀","☠️","👽"]
    @State var cardCount : Int = 4
    var body: some View {
        VStack{
            ScrollView{
                cards
            }
            cardAdjusters
        }
            .padding()
        }
    var cards: some View{
        LazyVGrid(columns: [GridItem(.adaptive(minimum: 120))]) {
            ForEach(0..<cardCount , id: \.self){ index in
                CardView(content: emojis[index])
                    .aspectRatio(2/3, contentMode: .fit)
            }
        }
        .foregroundColor(.orange)
    }
    var cardAdjusters: some View{
        HStack{
            cardAdd
            Spacer()
            cardRemover
        }
        .imageScale(.medium)
        .font(.largeTitle)

    }
    func cardCountAdjuster(by offset: Int , symbol: String) -> some View{
        Button(action:  {
                cardCount += offset
        }, label: {
            Image(systemName: symbol)
        })
        .disabled(cardCount + offset < 1 || cardCount + offset > emojis.count)
    }
    
    var cardRemover: some View{
        cardCountAdjuster(by: -1, symbol: "rectangle.stack.badge.minus.fill" )
    }
    
    var cardAdd: some View{
        cardCountAdjuster(by: +1, symbol: "rectangle.stack.badge.plus.fill" )
    }
    }
    
    struct CardView: View{
        let content: String
        @State var isFaceUp = true
        var body: some View{
            ZStack{
                let base = RoundedRectangle(cornerRadius: 12)
                if isFaceUp{
                    base.fill(.white)
                    base.strokeBorder(lineWidth: 2)
                    Text(content).font(.largeTitle)
                }
                else{
                    base.fill()
                }
            }
            .onTapGesture {
                isFaceUp.toggle()
            }
        }
    }
    
    
    
    
    
    
    
    struct ContentView_Previews: PreviewProvider {
        static var previews: some View {
            ContentView()
        }
    }
    

